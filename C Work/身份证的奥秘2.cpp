#include<stdio.h>
#include<string.h>
char a[20];
char JY();  /*这里最好加上这句，好处：一、方便注释，查看；
                二、移植性更好，毕竟子函数写在主函数之后 */ 
int main()
{
    int n;
    scanf("%d",&n);
    for (int i=1;i<=n;i++)
    {
        int l,t=0;
        gets(a);
        l=strlen(a);
        if (l==15)       //15位变为18位
        {
            //另一种操作：定义一个字符串数组，然后赋值 t[0]=a[12];t[1]=a[13];t[2]=a[14];t[3]='\0';
            for(int k=12;k<15;++k)   t=t*10+a[k]-'0';//***这里乘10加下一项用的很好 *** 
            if (t==996||t==997||t==998||t==999)    //18年
            {
                for (int j=14;j>=6;j--)  a[j+2]=a[j]; //空出两个位置 
                a[6]='1';a[7]='8';
            }
            else             //19年
            { 
                for (int j=14;j>=6;j--) a[j+2]=a[j];  //空出两个位置 
                a[6]='1';a[7]='9';
            }
            a[17]=JY();
            a[18]='\0'; //***终止这个字符串，值得借鉴***     
            printf("%s\n",a);        
        }
        else if (l==18)         //18位判断合法
        {           
            if (a[17]==JY()) printf("Valid\n");
            else printf("Invalid\n");
        }
        else  printf("Invalid\n");  //***考虑到非法输入，很好*** 
    }
    return 0;
}

char JY()  //最后一位校验码
{
    int s=0,c[17]={7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};  //权重
    char d[12]={'1','0','X','9','8','7','6','5','4','3','2','\0'}; 
    
    for (int k=0;k<17;k++)   s+=(a[k]-'0')*c[k];//所用字符串和主函数保持了一致。。。。 
    //这里相当于将d[]看成一个转换函数 
    return d[s%11];  //***靠return来确定函数的结果，便于使用！！！*** 
}

/*  ***体会：简化版的优势在于将求最后一位验证码的过程设计成一个函数
则先把字符都变成17位，在统一进行操作，达到简化的效果 *** 
